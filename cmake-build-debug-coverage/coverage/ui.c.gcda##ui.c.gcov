        -:    0:Source:C:/Desktop/OOP/lab2/ui.c
        -:    0:Graph:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\ui.c.gcno
        -:    0:Data:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\ui.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Daniel on 05.03.2022.
        -:    3://
        -:    4:
        -:    5:#include "ui.h"
        -:    6:
    #####:    7:void medicament_print(Medicament medicament){ // afiseaza un medicament pe ecran
        -:    8:    char nume[LGMAX_NUME], cod[LGMAX_COD];
    #####:    9:    medicament_get_nume(medicament, nume);
    #####:   10:    medicament_get_cod(medicament, cod);
    #####:   11:    printf("Cod: %s\tNume: %s\tConcentratie: %0.2f\tCantitate: %d\n",
        -:   12:           cod, nume, medicament_get_concentratie(medicament), medicament_get_cantitate(medicament));
    #####:   13:}
        -:   14:
    #####:   15:void citire_conc(double* nr)
        -:   16:{// citire nr
        -:   17:    char* endptr;
        -:   18:    char sconc[10];
    #####:   19:    printf("Concentratie:");
    #####:   20:    scanf("%s", sconc);
    #####:   21:    *nr = strtod(sconc, &endptr);
    #####:   22:    if(IS_ERROR(ERANGE)) {
    #####:   23:        printf("Concentratie introdusa gresit!\n");
    #####:   24:        CLEAR_ERRORS;
    #####:   25:        *nr = EROARE_CONC;
        -:   26:    }
    #####:   27:}
        -:   28:
    #####:   29:Medicament medicament_scan(){ // citire date medicament de la tastatura
        -:   30:    char nume[LGMAX_NUME], cod[LGMAX_COD], scant[10], sconc[10];
        -:   31:    double conc;
    #####:   32:    int cant=0;
    #####:   33:    printf("Cod:");
    #####:   34:    scanf("%s", cod);
    #####:   35:    printf("Nume:");
    #####:   36:    scanf("%s", nume);
    #####:   37:    printf("Concentratie:");
    #####:   38:    scanf("%s", sconc);
    #####:   39:    printf("Cantitate:");
    #####:   40:    scanf("%s", scant);
        -:   41:    // convert strings to numeric
        -:   42:    char *endptr1, *endptr2;
    #####:   43:    conc = strtod(sconc, &endptr1);
    #####:   44:    if(IS_ERROR(ERANGE)) {
    #####:   45:        printf("Concentratie introdusa gresit!\n");
    #####:   46:        CLEAR_ERRORS;
    #####:   47:        return medicament_create_default();
        -:   48:    }
    #####:   49:    cant = strtol(scant, &endptr2, 10);
    #####:   50:    if(IS_ERROR(ERANGE)){
    #####:   51:        printf("Cantitate introdusa gresit!\n");
    #####:   52:        CLEAR_ERRORS;
    #####:   53:        return medicament_create_default();
        -:   54:    }
    #####:   55:    Medicament rez = medicament_create(cod, nume, conc, cant);
    #####:   56:    return rez;
        -:   57:}
        -:   58:
    #####:   59:void service_print(Service* service)
        -:   60:{ // afisez medicamentele in stoc
    #####:   61:    int length = service_length(*service);
    #####:   62:    for(Medicament* elem= service_iterator(service);length>0;--length, ++elem)
    #####:   63:        if(medicament_get_cantitate(*elem)>0)
    #####:   64:            medicament_print(*elem);
    #####:   65:}
        -:   66:
    #####:   67:void printerrs(int cod_eroare){
        -:   68:    // iau erorile si le afisez
    #####:   69:    if(cod_eroare>=EROARE_CANT)
    #####:   70:        printf("Cantitatea introdusa gresit!\n"),
    #####:   71:        cod_eroare -= EROARE_CANT;
    #####:   72:    if(cod_eroare>=EROARE_CONC)
    #####:   73:        printf("Concentratie introdusa gresit!\n"),
    #####:   74:        cod_eroare -= EROARE_CONC;
    #####:   75:    if(cod_eroare>=EROARE_NUME)
    #####:   76:        printf("Nume introdus gresit!\n"),
    #####:   77:        cod_eroare -= EROARE_NUME;
    #####:   78:    if(cod_eroare>=EROARE_COD)
    #####:   79:        printf("Cod introdus gresit!\n"),
    #####:   80:        cod_eroare -= EROARE_COD;
    #####:   81:}
        -:   82:
    #####:   83:void menu(Service* service){ // meniul afisat odata si apelat recursiv
    #####:   84:    start:
    #####:   85:    printf("\tMeniu:\n\na) Adaugare de noi medicamente. Daca medicamentul este deja in stoc trebuie actualizat cantitatea\n"
        -:   86:           "b) Actualizare medicamente (modificare nume, concentratie pentru un medicament din stoc)\n"
        -:   87:           "c) Stergerea intregului stoc dintr-un medicament dat\n"
        -:   88:           "d) Vizualizare medicamente din stoc, ordonat dupa nume, cantitate (crescator/descrescator)\n"
        -:   89:           "e) Vizualizare lista de medicamente filtrate dupa un criteriu.\n"
        -:   90:           "i) Iesire din aplicatie\n\n");
    #####:   91:    read:
    #####:   92:    printf("Introduceti comanda:");
        -:   93:    char cmd;
    #####:   94:    scanf("%c", &cmd);
    #####:   95:    if(isblank(cmd) || cmd=='\n' || cmd == '\0' || cmd == ' ') goto read;
    #####:   96:    else if(cmd=='a') opt1(service);
    #####:   97:    else if(cmd=='b') opt2(service);
    #####:   98:    else if(cmd=='c') opt3(service);
    #####:   99:    else if(cmd=='d') opt4(service);
    #####:  100:    else if(cmd=='e') opt5(service);
    #####:  101:    else if(cmd=='i') goto end;
    #####:  102:    else printf("Comanda invalida!\n\n");
    #####:  103:    goto start;
    #####:  104:    end:
    #####:  105:    return;
        -:  106:}
    #####:  107:void opt1(Service* service){
        -:  108:    // prima optiune din meniu
    #####:  109:    Medicament medicament = medicament_scan();
    #####:  110:    int result = service_add(service, medicament);
    #####:  111:    if(result != SUCCESS)
    #####:  112:        printerrs(result);
    #####:  113:    else printf("Operatie efectuata cu succes!\n");
    #####:  114:}
        -:  115:
    #####:  116:void opt2(Service* service){
        -:  117:    // a doua opt din meniu
        -:  118:    char nume[LGMAX_NUME], nounume[LGMAX_NUME], cod[LGMAX_COD];
        -:  119:    double conc, nouaconc;
    #####:  120:    printf("Cod:");
    #####:  121:    scanf("%s", cod);
    #####:  122:    printf("Nume:");
    #####:  123:    scanf("%s", nume);
    #####:  124:    citire_conc(&conc);
    #####:  125:    if(conc == EROARE_CONC) return;
        -:  126:    // noi
    #####:  127:    printf("Nume nou:");
    #####:  128:    scanf("%s", nounume);
    #####:  129:    citire_conc(&nouaconc);
    #####:  130:    if(nouaconc == EROARE_CONC) return;
        -:  131:    // service
    #####:  132:    int result = service_modify(service, cod, nume, conc, nounume, nouaconc);
    #####:  133:    if(result == SUCCESS)
        -:  134:    {
    #####:  135:        printf("Operatie efectuata cu succes!\n");
    #####:  136:        return;
        -:  137:    }
    #####:  138:    if(result == NOT_FOUND)
        -:  139:    {
    #####:  140:        printf("Medicamentul nu a fost gasit!\n");
    #####:  141:        return;
        -:  142:    }
    #####:  143:    printerrs(result);
        -:  144:}
        -:  145:
    #####:  146:void opt3(Service* service){
        -:  147:    // a treia optiune din meniu
        -:  148:    char cod[LGMAX_COD];
    #####:  149:    printf("Cod:");
    #####:  150:    scanf("%s", cod);
    #####:  151:    int result = service_delete_cant(service, cod);
    #####:  152:    if(result == NOT_FOUND)
    #####:  153:        printf("Medicamentul nu a fost gasit!\n");
    #####:  154:    else printf("Operatie efectuata cu succes!\n");
    #####:  155:}
        -:  156:
    #####:  157:void opt4(Service* service){
        -:  158:    // a patra optiune din meniu
    #####:  159:    service_print(service);
    #####:  160:}
    #####:  161:void opt5(Service* service){
        -:  162:    // a cincea optiune din meniu
    #####:  163:}
