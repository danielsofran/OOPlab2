        -:    0:Source:/mnt/c/Desktop/CLionsProjects/OOPlab2/ui.c
        -:    0:Graph:/mnt/c/Desktop/CLionsProjects/OOPlab2/cmake-build-debug-coverage/CMakeFiles/lab2.dir/ui.c.gcno
        -:    0:Data:/mnt/c/Desktop/CLionsProjects/OOPlab2/cmake-build-debug-coverage/CMakeFiles/lab2.dir/ui.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "ui.h"
        -:    2:
    #####:    3:void medicament_print(Medicament* medicament){
    #####:    4:    printf("Cod: %s\tNume: %s\tConcentratie: %0.2f\tCantitate: %d\n",
        -:    5:           medicament_get_cod(medicament),
        -:    6:           medicament_get_nume(medicament),
        -:    7:           medicament_get_concentratie(medicament),
        -:    8:           medicament_get_cantitate(medicament)
        -:    9:    );
    #####:   10:}
        -:   11:
    #####:   12:void citire_conc(double* nr)
        -:   13:{
        -:   14:    char* endptr;
        -:   15:    char sconc[10];
    #####:   16:    printf("Concentratie:");
    #####:   17:    scanf("%s", sconc);
    #####:   18:    *nr = strtod(sconc, &endptr);
    #####:   19:    if(IS_ERROR(ERANGE)) {
    #####:   20:        printf("Concentratie introdusa gresit!\n");
    #####:   21:        CLEAR_ERRORS;
    #####:   22:        *nr = EROARE_CONC;
        -:   23:    }
    #####:   24:}
        -:   25:
    #####:   26:Medicament* medicament_scan(){
        -:   27:    char nume[LGMAX_NUME], cod[LGMAX_COD], scant[10], sconc[10];
        -:   28:    double conc;
    #####:   29:    int cant=0;
    #####:   30:    printf("Cod:");
    #####:   31:    scanf("%s", cod);
    #####:   32:    printf("Nume:");
    #####:   33:    scanf("%s", nume);
    #####:   34:    printf("Concentratie:");
    #####:   35:    scanf("%s", sconc);
    #####:   36:    printf("Cantitate:");
    #####:   37:    scanf("%s", scant);
        -:   38:    // convert strings to numeric
    #####:   39:    for(int i=0;sconc[i];++i)
    #####:   40:        if(!(isdigit(sconc[i]) || sconc[i]=='.')) {
    #####:   41:            printf("Concentratie introdusa gresit!\n");
    #####:   42:            return NULL;
        -:   43:        }
    #####:   44:    for(int i=0;scant[i];++i)
    #####:   45:        if(!isdigit(scant[i])){
    #####:   46:            printf("Cantitate introdusa gresit!\n");
    #####:   47:            return NULL;
        -:   48:        }
        -:   49:    char *endptr1, *endptr2;
    #####:   50:    conc = strtod(sconc, &endptr1);
    #####:   51:    if(IS_ERROR(ERANGE)) {
    #####:   52:        printf("Concentratie introdusa gresit!\n");
    #####:   53:        CLEAR_ERRORS;
    #####:   54:        return medicament_create_default();
        -:   55:    }
    #####:   56:    cant = strtol(scant, &endptr2, 10);
    #####:   57:    if(IS_ERROR(ERANGE)){
    #####:   58:        printf("Cantitate introdusa gresit!\n");
    #####:   59:        CLEAR_ERRORS;
    #####:   60:        return medicament_create_default();
        -:   61:    }
    #####:   62:    Medicament* rez = medicament_create(cod, nume, conc, cant);
    #####:   63:    return rez;
        -:   64:}
        -:   65:
    #####:   66:void service_print(Service* service)
        -:   67:{
    #####:   68:    int length = service_length(service);
    #####:   69:    for(int i=0; i<length;++i)
    #####:   70:        medicament_print(service_element(service, i));
    #####:   71:}
        -:   72:
    #####:   73:void printerrs(int cod_eroare){
    #####:   74:    if(cod_eroare>=EROARE_CANT)
    #####:   75:        printf("Cantitatea introdusa gresit!\n"),
    #####:   76:        cod_eroare -= EROARE_CANT;
    #####:   77:    if(cod_eroare>=EROARE_CONC)
    #####:   78:        printf("Concentratie introdusa gresit!\n"),
    #####:   79:        cod_eroare -= EROARE_CONC;
    #####:   80:    if(cod_eroare>=EROARE_NUME)
    #####:   81:        printf("Nume introdus gresit!\n"),
    #####:   82:        cod_eroare -= EROARE_NUME;
    #####:   83:    if(cod_eroare>=EROARE_COD)
    #####:   84:        printf("Cod introdus gresit!\n"),
    #####:   85:        cod_eroare -= EROARE_COD;
    #####:   86:}
        -:   87:
    #####:   88:void menu(Service* service){
        -:   89:    start:
    #####:   90:    printf("\tMeniu:\n\na) Adaugare de noi medicamente. Daca medicamentul este deja in stoc trebuie actualizat cantitatea\n"
        -:   91:           "b) Actualizare medicamente (modificare nume, concentratie pentru un medicament din stoc)\n"
        -:   92:           "c) Stergerea intregului stoc dintr-un medicament dat\n"
        -:   93:           "d) Vizualizare medicamente din stoc, ordonat dupa nume, cantitate (crescator/descrescator)\n"
        -:   94:           "e) Vizualizare lista de medicamente filtrate dupa un criteriu.\n"
        -:   95:           "i) Iesire din aplicatie\n\n");
        -:   96:    read:
    #####:   97:    printf("Introduceti comanda:");
        -:   98:    char cmd;
    #####:   99:    scanf("%c", &cmd);
    #####:  100:    if(isblank(cmd) || cmd=='\n' || cmd == '\0' || cmd == ' ') goto read;
    #####:  101:    else if(cmd=='a') opt1(service);
    #####:  102:    else if(cmd=='b') opt2(service);
    #####:  103:    else if(cmd=='c') opt3(service);
    #####:  104:    else if(cmd=='d') opt4(service);
    #####:  105:    else if(cmd=='e') opt5(service);
    #####:  106:    else if(cmd=='i') goto end;
    #####:  107:    else printf("Comanda invalida!\n\n");
    #####:  108:    goto start;
        -:  109:    end:
    #####:  110:    return;
        -:  111:}
    #####:  112:void opt1(Service* service){
    #####:  113:    Medicament* medicament = medicament_scan();
    #####:  114:    int result = service_add(service, medicament_get_cod(medicament), medicament_get_nume(medicament),
        -:  115:                             medicament_get_concentratie(medicament), medicament_get_cantitate(medicament));
    #####:  116:    medicament_delete(medicament);
    #####:  117:    if(result != SUCCESS)
    #####:  118:        printerrs(result);
    #####:  119:    else printf("Operatie efectuata cu succes!\n");
    #####:  120:}
        -:  121:
    #####:  122:void opt2(Service* service){
        -:  123:    char nume[LGMAX_NUME], nounume[LGMAX_NUME], cod[LGMAX_COD];
        -:  124:    double conc, nouaconc;
    #####:  125:    printf("Cod:");
    #####:  126:    scanf("%s", cod);
    #####:  127:    printf("Nume:");
    #####:  128:    scanf("%s", nume);
    #####:  129:    citire_conc(&conc);
    #####:  130:    if(conc == EROARE_CONC) return;
        -:  131:    // noi
    #####:  132:    printf("Nume nou:");
    #####:  133:    scanf("%s", nounume);
    #####:  134:    citire_conc(&nouaconc);
    #####:  135:    if(nouaconc == EROARE_CONC) return;
        -:  136:    // service
    #####:  137:    int result = service_modify(service, cod, nume, conc, nounume, nouaconc);
    #####:  138:    if(result == SUCCESS)
        -:  139:    {
    #####:  140:        printf("Operatie efectuata cu succes!\n");
    #####:  141:        return;
        -:  142:    }
    #####:  143:    if(result == NOT_FOUND)
        -:  144:    {
    #####:  145:        printf("Medicamentul nu a fost gasit!\n");
    #####:  146:        return;
        -:  147:    }
    #####:  148:    printerrs(result);
        -:  149:}
        -:  150:
    #####:  151:void opt3(Service* service){
        -:  152:    char cod[LGMAX_COD];
    #####:  153:    printf("Cod:");
    #####:  154:    scanf("%s", cod);
    #####:  155:    int result = service_delete_cant(service, cod);
    #####:  156:    if(result == NOT_FOUND)
    #####:  157:        printf("Medicamentul nu a fost gasit!\n");
    #####:  158:    else printf("Operatie efectuata cu succes!\n");
    #####:  159:}
        -:  160:
    #####:  161:void opt4(Service* service){
    #####:  162:    service_print(service);
    #####:  163:}
    #####:  164:void opt5(Service* service){
        -:  165:
    #####:  166:}
