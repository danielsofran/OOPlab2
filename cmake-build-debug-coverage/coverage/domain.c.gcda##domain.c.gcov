        -:    0:Source:C:/Desktop/OOP/lab2/domain.c
        -:    0:Graph:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\domain.c.gcno
        -:    0:Data:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\domain.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Daniel on 05.03.2022.
        -:    3://
        -:    4:
        -:    5:#include <math.h>
        -:    6:#include "domain.h"
        -:    7:
        6:    8:Medicament* medicament_create_default(){
        6:    9:    Medicament* medicament = malloc(sizeof(Medicament));
        6:   10:    medicament->cod = NULL;
        6:   11:    medicament->nume = NULL;
        6:   12:    medicament->concentratie = 0.0;
        6:   13:    medicament->cantitate = 0;
        6:   14:    return medicament;
        -:   15:}
        -:   16:
       17:   17:Medicament* medicament_create(char* cod, char* nume, double concentratie, int cantitate){
       17:   18:    Medicament* medicament = malloc(sizeof(Medicament));
       17:   19:    if(cod==NULL) medicament->cod = NULL;
        -:   20:    else {
       16:   21:        medicament->cod = malloc(sizeof(char) * (strlen(cod) + 1));
       16:   22:        strcpy(medicament->cod, cod);
        -:   23:    }
       17:   24:    if(nume==NULL) medicament->nume = NULL;
        -:   25:    else {
       16:   26:        medicament->nume = malloc(sizeof(char) * (strlen(nume)+1));
       16:   27:        strcpy(medicament->nume, nume);
        -:   28:    }
       17:   29:    medicament->concentratie = concentratie;
       17:   30:    medicament->cantitate = cantitate;
       17:   31:    return medicament;
        -:   32:}
        -:   33:
       16:   34:char* medicament_get_cod(Medicament* medicament){
       16:   35:    return medicament->cod;
        -:   36:}
       30:   37:char* medicament_get_nume(Medicament* medicament){
       30:   38:    return medicament->nume;
        -:   39:}
       12:   40:double medicament_get_concentratie(Medicament* medicament){
       12:   41:    return medicament->concentratie;
        -:   42:}
       27:   43:int medicament_get_cantitate(Medicament* medicament){
       27:   44:    return medicament->cantitate;
        -:   45:}
        -:   46:
        2:   47:void medicament_set_cod(Medicament* medicament, char* cod){
       2*:   48:    if(medicament->cod) free(medicament->cod);
        2:   49:    medicament->cod = malloc(sizeof(char)*(strlen(cod)+1));
        2:   50:    strcpy(medicament->cod, cod);
        2:   51:}
        5:   52:void medicament_set_nume(Medicament* medicament, char* nume){
        5:   53:    if(medicament->nume) free(medicament->nume);
        5:   54:    medicament->nume = malloc(sizeof(char)*(strlen(nume)+1));
        5:   55:    strcpy(medicament->nume, nume);
        5:   56:}
        3:   57:void medicament_set_concentratie(Medicament* medicament, double concentratie){
        3:   58:    medicament->concentratie = concentratie;
        3:   59:}
        8:   60:void medicament_set_cantitate(Medicament* medicament, int cantitate){
        8:   61:    medicament->cantitate = cantitate;
        8:   62:}
        -:   63:
       22:   64:int medicament_eq(void* m1, void* m2){
       22:   65:    Medicament* medicament1 = (Medicament*)m1;
       22:   66:    Medicament* medicament2 = (Medicament*)m2;
       22:   67:    if(medicament1->cod == NULL || medicament2->cod == NULL) return medicament1->cod == medicament2->cod;
       18:   68:    if(strcmp(medicament1->cod, medicament2->cod) !=0) return 0;
        -:   69:
      14*:   70:    if(medicament1->nume == NULL || medicament2->cod == NULL) return medicament1->nume == medicament2->nume;
      14*:   71:    if(strcmp(medicament1->nume, medicament2->nume) !=0) return 0;
        -:   72:
      14*:   73:    if(fabs(medicament1->concentratie-medicament2->concentratie)>=1e-6) return 0;
       14:   74:    return 1;
        -:   75:}
        -:   76:
        1:   77:void medicament_sterge_stoc(Medicament* medicament){
        1:   78:    medicament->cantitate = 0;
        1:   79:}
        -:   80:
        5:   81:int medicament_compare(void* medicament1, void* medicament2, int reversed){
        5:   82:    Medicament* m1 = medicament1, *m2 = medicament2;
        5:   83:    int cmpnume = strcmp(medicament_get_nume(m1), medicament_get_nume(m2));
        5:   84:    if(cmpnume<0) return -1*reversed;
       2*:   85:    if(cmpnume>0) return 1*reversed;
        -:   86:    // altfel, numele sunt egale
        2:   87:    int cmpcant = medicament_get_cantitate(m1) - medicament_get_cantitate(m2);
        2:   88:    if(cmpcant<0) return -1*reversed;
       1*:   89:    if(cmpcant>0) return 1*reversed;
        1:   90:    return EQUAL; // altfel, sunt egale
        -:   91:}
        -:   92:
        4:   93:int filtru_nume(void* medicament, void* filtru){
        4:   94:    char c = medicament_get_nume(filtru)[0];
        4:   95:    return c == medicament_get_nume(medicament)[0];
        -:   96:}
        -:   97:
        4:   98:int filtru_cantitate(void* medicament, void* filtru){
        8:   99:    return medicament_get_cantitate(medicament)<
        4:  100:            medicament_get_cantitate(filtru);
        -:  101:}
        -:  102:
       23:  103:void medicament_delete(Medicament* medicament)
        -:  104:{
       23:  105:    if(medicament->cod != NULL) free(medicament->cod);
       23:  106:    if(medicament->nume != NULL) free(medicament->nume);
       23:  107:    free(medicament);
       23:  108:    medicament=NULL;
       23:  109:}
