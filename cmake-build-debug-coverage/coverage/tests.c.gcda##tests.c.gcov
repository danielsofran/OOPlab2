        -:    0:Source:C:/Desktop/OOP/lab2/tests.c
        -:    0:Graph:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\tests.c.gcno
        -:    0:Data:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\tests.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Daniel on 05.03.2022.
        -:    3://
        -:    4:
        -:    5:#include "tests.h"
        -:    6:
        1:    7:void test_medicament_getters(){ // testez toti getterii
        1:    8:    Medicament medicament = medicament_create_default();
        -:    9:    char nume[LGMAX_NUME], cod[LGMAX_COD];
        1:   10:    medicament_get_cod(medicament, cod);
        1:   11:    medicament_get_nume(medicament, nume);
       1*:   12:    assert(strcmp(cod, "0")==0);
       1*:   13:    assert(strcmp(nume, "medicament")==0);
       1*:   14:    assert(medicament_get_concentratie(medicament) == 0.0);
       1*:   15:    assert(medicament_get_cantitate(medicament) == 0);
        -:   16:
        1:   17:    medicament = medicament_create("1234", "Fasconal", 30.0, 10);
        1:   18:    medicament_get_cod(medicament, cod);
        1:   19:    medicament_get_nume(medicament, nume);
       1*:   20:    assert(strcmp(cod, "1234")==0);
       1*:   21:    assert(strcmp(nume, "Fasconal")==0);
       1*:   22:    assert(medicament_get_concentratie(medicament) == 30.0);
       1*:   23:    assert(medicament_get_cantitate(medicament) == 10);
        1:   24:}
        -:   25:
        1:   26:void test_medicament_setters(){ // testez toti setterii
        -:   27:    Medicament medicament;
        1:   28:    medicament_set_cod(&medicament, "1234");
        1:   29:    medicament_set_nume(&medicament, "Fasconal");
        1:   30:    medicament_set_concentratie(&medicament, 30.0);
        1:   31:    medicament_set_cantitate(&medicament, 10);
        -:   32:
        -:   33:    char nume[LGMAX_NUME], cod[LGMAX_COD];
        1:   34:    medicament_get_cod(medicament, cod);
        1:   35:    medicament_get_nume(medicament, nume);
       1*:   36:    assert(strcmp(cod, "1234")==0);
       1*:   37:    assert(strcmp(nume, "Fasconal")==0);
       1*:   38:    assert(medicament_get_concentratie(medicament) == 30.0);
       1*:   39:    assert(medicament_get_cantitate(medicament) == 10);
        1:   40:}
        -:   41:
        1:   42:void test_medicament_externs(){ // testez operatiile externe
        1:   43:    Medicament medicament1, medicament2 = medicament_create("1234", "Fasconal", 30.0, 10);
        1:   44:    medicament_set_cod(&medicament1, "1234");
        1:   45:    medicament_set_nume(&medicament1, "Fasconal");
        1:   46:    medicament_set_concentratie(&medicament1, 30.0);
        1:   47:    medicament_set_cantitate(&medicament1, 10);
       1*:   48:    assert(medicament_eq(medicament1, medicament2));
       1*:   49:    assert(!medicament_eq(medicament1, medicament_create_default()));
        -:   50:
        1:   51:    medicament_sterge_stoc(&medicament1);
       1*:   52:    assert(medicament_get_cantitate(medicament1) == 0);
        1:   53:}
        -:   54:
        1:   55:void test_validator(){
       1*:   56:    assert(validate_nume("abC def") == VALIDATOR_OK);
       1*:   57:    assert(validate_nume("asfswd%") == EROARE_NUME);
       1*:   58:    assert(validate_nume("") == EROARE_NUME);
       1*:   59:    assert(validate_cod("Abc123") == VALIDATOR_OK);
       1*:   60:    assert(validate_cod("ned$wbu") == EROARE_COD);
       1*:   61:    assert(validate_cod("") == EROARE_COD);
       1*:   62:    assert(validate_cantitate(3) == VALIDATOR_OK);
       1*:   63:    assert(validate_cantitate(-2) == EROARE_CANT);
       1*:   64:    assert(validate_concentratie(82.123) == VALIDATOR_OK);
       1*:   65:    assert(validate_concentratie(-39.1) == EROARE_CONC);
       1*:   66:    assert(validate_concentratie(120.0) == EROARE_CONC);
        -:   67:
        1:   68:    Medicament medicament = medicament_create("", "acb", 0, 0);
       1*:   69:    assert(validate_madicament(medicament) == 0b1101);
        1:   70:}
        -:   71:
        1:   72:void test_repo_getters(){ // testez getterii
        1:   73:    Repository repository = repository_create();
       1*:   74:    assert(repository_get_length(repository) == 0);
       1*:   75:    assert(repository_get_capacity(repository) == LENGTHMAX);
        -:   76:
        1:   77:    Medicament medicament = repository_get_element_at(repository, 1);
       1*:   78:    assert(IS_ERROR(OUT_OF_RANGE));
        1:   79:    CLEAR_ERRORS;
        -:   80:
        1:   81:    medicament = medicament_create_default();
        1:   82:    repository.length=1;
        1:   83:    repository.medicamente[0] = medicament;
       1*:   84:    assert(medicament_eq(medicament_create_default(), repository_get_element_at(repository, 0)));
        1:   85:    int index = repository_index_of(repository, medicament_create_default()),
        1:   86:    index2 = repository_index_of_cod(repository, "0");
       1*:   87:    assert(index == 0);
       1*:   88:    assert(index2 == 0);
        1:   89:    index = repository_index_of(repository, medicament_create("1", "2", 3.7, 4));
        1:   90:    index2 = repository_index_of_cod(repository, "1");
       1*:   91:    assert(index == NOT_FOUND);
       1*:   92:    assert(index2 == NOT_FOUND);
        1:   93:}
        -:   94:
        1:   95:void test_repo_setters(){
        1:   96:    Repository repository = repository_create();
        1:   97:    Medicament m1 = medicament_create_default(), m2 = medicament_create("1234", "Fasconal", 30.0, 10);
        1:   98:    repository_add(&repository, m1);
       1*:   99:    assert(repository_get_length(repository)==1);
       1*:  100:    assert(medicament_eq(m1, repository_get_element_at(repository, 0)));
        -:  101:
        1:  102:    repository_set_length(&repository, LENGTHMAX+10);
       1*:  103:    assert(IS_ERROR(INSUFFICIENT_CAPACITY));
        1:  104:    CLEAR_ERRORS;
        -:  105:
        1:  106:    repository_set_length(&repository, 2);
       1*:  107:    assert(repository_get_length(repository) == 2);
        1:  108:    repository_set_element_at(&repository, 1, m2);
       1*:  109:    assert(medicament_eq(m2, repository_get_element_at(repository, 1)));
        -:  110:
        1:  111:    repository_set_element_at(&repository, 3, m1);
       1*:  112:    assert(IS_ERROR(OUT_OF_RANGE));
        1:  113:    CLEAR_ERRORS;
        -:  114:
        1:  115:    repository_set_length(&repository, LENGTHMAX);
        1:  116:    repository_add(&repository, m1);
       1*:  117:    assert(IS_ERROR(OUT_OF_RANGE));
        1:  118:    CLEAR_ERRORS;
        1:  119:}
        -:  120:
        1:  121:void test_service()
        -:  122:{
        1:  123:    Repository repository = repository_create();
        1:  124:    Service service = service_create(repository);
        1:  125:    Medicament m1 = medicament_create_default(),
        1:  126:    m2 = medicament_create("1234", "Fasconal", 30.0, 10);
       1*:  127:    assert(service_length(service) == 0);
       1*:  128:    assert(service_iterator(&service) == NULL);
        -:  129:    // ADAUGARE
        -:  130:    // eroare
        1:  131:    int result = service_add(&service, m1);
       1*:  132:    assert(result != SUCCESS);
        -:  133:    // un elem
        1:  134:    result = service_add(&service, m2);
       1*:  135:    assert(result == SUCCESS);
       1*:  136:    assert(service_length(service) == 1);
       1*:  137:    assert(medicament_eq(*service_iterator(&service), m2));
        -:  138:    // 2 elemente de acelasi tip
        1:  139:    medicament_set_cantitate(&m2, 5);
        1:  140:    result = service_add(&service, m2);
       1*:  141:    assert(result == SUCCESS);
       1*:  142:    assert(service_length(service) == 1);
        -:  143:    // alt elem diferit
        1:  144:    medicament_set_cod(&m2, "abc");
        1:  145:    result = service_add(&service, m2);
       1*:  146:    assert(result == SUCCESS);
       1*:  147:    assert(service_length(service) == 2);
        -:  148:
        -:  149:    // MODIFICARE
        1:  150:    result = service_modify(&service, "abc", "Fasconal", 30.0, "Parasinus", 25.0);
       1*:  151:    assert(result == SUCCESS);
        1:  152:    result = service_modify(&service, "dac", "Fasconal", 30.0, "Parasinus", 25.0);
       1*:  153:    assert(result == NOT_FOUND);
        1:  154:    result = service_modify(&service, "abc", "Fasconal", 30.0, "^%^&%*", 120.0);
       1*:  155:    assert(result == EROARE_NUME + EROARE_CONC);
        1:  156:    result = service_modify(&service, "abc", "Fasconal", 30.0, "med", 120.0);
       1*:  157:    assert(result == EROARE_CONC);
        -:  158:
        -:  159:    // stergere cantitate
        1:  160:    result = service_delete_cant(&service, "abc");
       1*:  161:    assert(result == SUCCESS);
        1:  162:    result = service_delete_cant(&service, "dac");
       1*:  163:    assert(result == NOT_FOUND);
        1:  164:}
        -:  165:
        1:  166:void testall() { // apelez toate testele
        1:  167:    test_medicament_getters();
        1:  168:    test_medicament_setters();
        1:  169:    test_validator();
        1:  170:    test_repo_getters();
        1:  171:    test_medicament_externs();
        1:  172:    test_repo_setters();
        1:  173:    test_service();
        1:  174:}
