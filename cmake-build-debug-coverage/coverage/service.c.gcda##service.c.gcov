        -:    0:Source:C:/Desktop/OOP/lab2/service.c
        -:    0:Graph:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\service.c.gcno
        -:    0:Data:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\service.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Daniel on 05.03.2022.
        -:    3://
        -:    4:
        -:    5:#include "service.h"
        -:    6:
        2:    7:Service* service_create(Repository* repository){
        2:    8:    Service* service = malloc(sizeof(Service));
        2:    9:    service->repository = repository;
        2:   10:    return service;
        -:   11:}
        -:   12:
       20:   13:int service_length(Service* service)
        -:   14:{
       20:   15:    return repository_get_length(service->repository);
        -:   16:}
        -:   17:
        7:   18:Medicament* service_element(Service* service, int index)
        -:   19:{
       7*:   20:    if(service_length(service) == 0) return NULL;
        7:   21:    return service->repository->elements[index];
        -:   22:}
        -:   23:
        4:   24:int service_add(Service* service, char* cod, char* nume, double concentratie, int cantitate){
        -:   25:    // 1. creez
        4:   26:    Medicament* medicament = medicament_create(cod, nume, concentratie, cantitate);
        -:   27:    // 2. validez
        4:   28:    int cod_eroare = validate_madicament(medicament);
        4:   29:    if(cod_eroare != SUCCESS) {
        1:   30:        medicament_delete(medicament);
        1:   31:        return cod_eroare;
        -:   32:    }
        -:   33:    // 3. adaug
        3:   34:    int index = repository_index_of(service->repository, medicament);
        3:   35:    if(index == NOT_FOUND) {
        2:   36:        repository_add(service->repository, medicament);
        2:   37:        return SUCCESS;
        -:   38:    }
        -:   39:    else{
        1:   40:        int cant_to_add = medicament_get_cantitate(medicament);
        1:   41:        medicament_delete(medicament);
        1:   42:        Medicament* elem = repository_get_element_at(service->repository, index);
        1:   43:        int cant = medicament_get_cantitate(elem);
        1:   44:        medicament_set_cantitate(elem, cant+cant_to_add);
        1:   45:        return SUCCESS;
        -:   46:    }
        -:   47:}
        -:   48:
        4:   49:int service_modify(Service* service, char* cod, char* nume, double conc, char* nounume, double nouaconc)
        -:   50:{
        4:   51:    Medicament* medicament = medicament_create(cod, nume, conc, 1);
        4:   52:    int result = validate_madicament(medicament);
       4*:   53:    if(result != SUCCESS) { medicament_delete(medicament); return result;}
        4:   54:    result = validate_nume(nounume) + validate_concentratie(nouaconc);
        4:   55:    if(result != SUCCESS) { medicament_delete(medicament); return result;}
        -:   56:
        2:   57:    int index = repository_index_of(service->repository, medicament);
        2:   58:    medicament_delete(medicament);
        2:   59:    if(index == NOT_FOUND) return NOT_FOUND;
        1:   60:    medicament = repository_get_element_at(service->repository, index);
        1:   61:    medicament_set_nume(medicament, nounume);
        1:   62:    medicament_set_concentratie(medicament, nouaconc);
        -:   63:    //repository_set_element_at(service->repository, index, medicament);
        1:   64:    return SUCCESS;
        -:   65:}
        -:   66:
        2:   67:int service_delete_cant(Service* service, char* cod)
        -:   68:{
        2:   69:    Medicament* medicament = NULL;
        5:   70:    for(int i=0;i< service_length(service);++i)
        -:   71:    {
        4:   72:        medicament = service_element(service, i);
        4:   73:        if(strcmp(medicament_get_cod(medicament), cod)==0)
        1:   74:            break;
        3:   75:        medicament = NULL;
        -:   76:    }
        2:   77:    if(medicament == NULL) return NOT_FOUND;
        1:   78:    medicament_set_cantitate(medicament, 0);
        1:   79:    return SUCCESS;
        -:   80:}
        -:   81:
        2:   82:void service_delete(Service* service)
        -:   83:{
        4:   84:    for(int i=0;i< service_length(service);++i)
        -:   85:    {
        2:   86:        Medicament* medicament = service_element(service, i);
        2:   87:        if(medicament!=NULL) medicament_delete(medicament);
        -:   88:    }
        2:   89:    repository_delete(service->repository);
        2:   90:    free(service);
        2:   91:}
