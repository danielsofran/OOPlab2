        -:    0:Source:C:/Desktop/OOP/lab2/repository.c
        -:    0:Graph:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\repository.c.gcno
        -:    0:Data:C:\Desktop\OOP\lab2\cmake-build-debug-coverage\CMakeFiles\lab2.dir\repository.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Daniel on 05->03->2022->
        -:    3://
        -:    4:
        -:    5:#include "repository.h"
        -:    6:
        3:    7:Repository* repository_create(int (*eq)(void*, void*)){
        3:    8:    Repository* repository = malloc(sizeof(Repository));
        3:    9:    repository->capacity = 100;
        3:   10:    repository->length = 0;
        3:   11:    repository->elements = (void**) malloc(sizeof(void*) * repository->capacity);
      303:   12:    for(int i=0;i<repository->capacity;++i)
      300:   13:        repository->elements[i] = NULL;
        3:   14:    repository->elem_eq = eq;
        3:   15:    return repository;
        -:   16:}
        -:   17:
       25:   18:int repository_get_length(Repository* repository){
       25:   19:    return repository->length;
        -:   20:}
        2:   21:int repository_get_capacity(Repository* repository) {
        2:   22:    return repository->capacity;
        -:   23:}
       14:   24:void* repository_get_element_at(Repository* repository, int index) {
       14:   25:    if(index>=0 && index<repository->length)
       13:   26:        return repository->elements[index];
        1:   27:    SET_ERROR(OUT_OF_RANGE);
        1:   28:    return NULL;
        -:   29:}
        -:   30:
        3:   31:void repository_set_length(Repository* repository, int length) {
        3:   32:    if(length>repository->capacity)
        1:   33:        repository_set_capacity(repository, length);
        3:   34:    repository->length = length;
        3:   35:}
        2:   36:void repository_set_capacity(Repository* repository, int capacity) {
        2:   37:    void** copy = malloc(sizeof(void*)*capacity);
      207:   38:    for(int i=0;i<repository->capacity;++i) {
        -:   39:        // copiem memoria?
      205:   40:        copy[i] = repository->elements[i];
        -:   41:    }
        2:   42:    free(repository->elements);
        2:   43:    repository->elements = copy;
        2:   44:    repository->capacity = capacity;
        2:   45:}
        2:   46:void repository_set_element_at(Repository* repository, int index, void* value) {
        2:   47:    if(index<repository->length && index >=0) {
       1*:   48:        if(repository->elements[index] != NULL) free(repository->elements[index]);
        1:   49:        repository->elements[index] = value;
        -:   50:    }
        1:   51:    else SET_ERROR(OUT_OF_RANGE);
        2:   52:}
        -:   53:
        4:   54:void repository_add(Repository* repository, void* value){
       4*:   55:    if(repository->length > repository->capacity) repository_set_capacity(repository, repository->capacity + repository->capacity/2);
        4:   56:    repository->elements[repository->length++] = value;
        4:   57:}
        -:   58:
        7:   59:int repository_index_of(Repository* repository, void* value)
        -:   60:{
        7:   61:    int n = repository_get_length(repository);
       12:   62:    for(int i=0;i<n;++i)
        8:   63:        if(repository->elem_eq(value, repository_get_element_at(repository, i)))
        3:   64:            return i;
        4:   65:    return NOT_FOUND;
        -:   66:}
        -:   67:
        3:   68:void repository_delete(Repository* repository)
        -:   69:{
        -:   70://    for(int i=0;i<repository->length;++i)
        -:   71://        if(repository->elements[i] != NULL)
        -:   72://            free(repository->elements[i]);
        3:   73:    free(repository->elements);
        3:   74:    free(repository);
        3:   75:}
